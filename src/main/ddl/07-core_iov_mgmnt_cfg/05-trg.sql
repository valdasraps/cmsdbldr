
--CONFIG_KEY
PROMPT Creating Trigger 'TR_INS_CONFIG_KEY'
CREATE OR replace trigger TR_INS_CONFIG_KEY
BEFORE INSERT
ON CONFIG_KEY
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

   if :new.CONFIG_KEY_ID is null then
      SELECT CONFIG_KEY_ID_SEQ.NEXTVAL INTO :new.CONFIG_KEY_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   if :new.CONFIG_KEY_TYPE_ID is null then
    SELECT CONFIG_KEY_TYPE_ID INTO :new.CONFIG_KEY_TYPE_ID FROM CONFIG_KEY_TYPES where NAME='default';
   end if;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger 'TR_UPD_CONFIG_KEY'
create or replace trigger TR_UPD_CONFIG_KEY
BEFORE UPDATE
ON CONFIG_KEY
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_KEY_ID         := :OLD.CONFIG_KEY_ID;
   :new.CONFIG_KEY_TYPE_ID    := :OLD.CONFIG_KEY_TYPE_ID;
   :new.NAME                  := :OLD.NAME;
   :new.PROVENANCE            := :OLD.PROVENANCE;
   :new.CREATE_TIMESTAMP      := :OLD.CREATE_TIMESTAMP;
   :new.CREATED_BY_USER       := :OLD.CREATED_BY_USER;

--   :new.COMMENT_DESCRIPTION   := :OLD.COMMENT_DESCRIPTION;


   if :new.COMMENT_DESCRIPTION is null then
      :new.COMMENT_DESCRIPTION := :OLD.COMMENT_DESCRIPTION;
   end if;


   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR



--CONFIG_KEY_ALIAS_MAPS
PROMPT Creating Trigger 'TR_INS_CONFIG_KEY_ALIAS_MAPS'
create or replace trigger TR_INS_CONFIG_KEY_ALIAS_MAPS
BEFORE INSERT
ON CONFIG_KEY_ALIAS_MAPS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

   if :new.CONFIG_KEY_ALIAS_MAP_ID is null then
      SELECT  CONFIG_KEY_ALIAS_MAP_ID_SEQ.NEXTVAL INTO :new.CONFIG_KEY_ALIAS_MAP_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   if :new.IS_MOVED_TO_HISTORY is null then
     :NEW.IS_MOVED_TO_HISTORY  := 'F';
   end if;

   update CONFIG_KEY_ALIAS_MAPS set IS_MOVED_TO_HISTORY = 'T' where CONFIG_KEY_ALIAS_ID=:new.CONFIG_KEY_ALIAS_ID;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger 'TR_UPD_CONFIG_KEY_ALIAS_MAPS'
create or replace trigger TR_UPD_CONFIG_KEY_ALIAS_MAPS
BEFORE UPDATE
ON CONFIG_KEY_ALIAS_MAPS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_KEY_ALIAS_MAP_ID := :OLD.CONFIG_KEY_ALIAS_MAP_ID;
   :new.CONFIG_KEY_ALIAS_ID := :OLD.CONFIG_KEY_ALIAS_ID;
   :new.CONFIG_KEY_ID    := :OLD.CONFIG_KEY_ID;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR



--CONFIG_KEY_ALIASES
PROMPT Creating Trigger 'TR_INS_CONFIG_KEY_ALIASES'
create or replace trigger TR_INS_CONFIG_KEY_ALIASES
BEFORE INSERT
ON CONFIG_KEY_ALIASES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

   if :new.CONFIG_KEY_ALIAS_ID is null then
      SELECT  CONFIG_KEY_ALIAS_ID_SEQ.NEXTVAL INTO :new.CONFIG_KEY_ALIAS_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger 'TR_UPD_CONFIG_KEY_ALIASES'
create or replace trigger TR_UPD_CONFIG_KEY_ALIASES
BEFORE UPDATE
ON CONFIG_KEY_ALIASES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_KEY_ALIAS_ID   := :OLD.CONFIG_KEY_ALIAS_ID;
   :new.NAME   := :OLD.NAME;
   :new.CREATE_TIMESTAMP      := :OLD.CREATE_TIMESTAMP;
   :new.CREATED_BY_USER       := :OLD.CREATED_BY_USER;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR



--CONFIG_KEY_RUN_HST
PROMPT Creating Trigger 'TR_INS_CONFIG_KEY_RUN_HST'
create or replace trigger TR_INS_CONFIG_KEY_RUN_HST
 BEFORE INSERT
 ON CONFIG_KEY_RUN_HST
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN

   if :new.CONFIG_KEY_RUN_HST_ID is null then
      SELECT CONFIG_KEY_RUN_HST_ID_SEQ.NEXTVAL INTO :new.CONFIG_KEY_RUN_HST_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR


PROMPT Creating Trigger 'TR_UPD_CONFIG_KEY_RUN_HST'
create or replace trigger TR_UPD_CONFIG_KEY_RUN_HST
 BEFORE UPDATE
 ON CONFIG_KEY_RUN_HST
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_KEY_RUN_HST_ID := :OLD.CONFIG_KEY_RUN_HST_ID;

   :new.COND_RUN_ID     := :OLD.COND_RUN_ID;
   :new.CONFIG_KEY_ID   := :OLD.CONFIG_KEY_ID;
   :new.NAME            := :OLD.NAME;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;

/
SHOW ERROR




--CONFIG_KEY_SUBVER_MAPS_HST
PROMPT Creating Trigger 'TR_INS_CONFIG_KEY_SV_MAPS_HST'
create or replace trigger TR_INS_CONFIG_KEY_SV_MAPS_HST
BEFORE INSERT
ON CONFIG_KEY_SUBVER_MAPS_HST
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

   if :new.CONFIG_KEY_SUBVER_MAP_HST_ID is null then
      SELECT CONFIG_KEY_SUBVER_HST_ID_SEQ.NEXTVAL INTO :new.CONFIG_KEY_SUBVER_MAP_HST_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger 'TR_UPD_CONFIG_KEY_SV_MAPS_HST'
create or replace trigger TR_UPD_CONFIG_KEY_SV_MAPS_HST
BEFORE UPDATE
ON CONFIG_KEY_SUBVER_MAPS_HST
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_KEY_SUBVER_MAP_HST_ID := :OLD.CONFIG_KEY_SUBVER_MAP_HST_ID;

    :new.CONDITION_DATA_SET_ID := :OLD.CONDITION_DATA_SET_ID;
    :new.CONFIG_KEY_RUN_HST_ID := :OLD.CONFIG_KEY_RUN_HST_ID;
    :new.CONFIG_KEY_VERSION_MAP_ID := :OLD.CONFIG_KEY_VERSION_MAP_ID;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR


--CONFIG_KEY_TYPES
PROMPT Creating Trigger 'TR_INS_CONFIG_KEY_TYPES'
create or replace trigger TR_INS_CONFIG_KEY_TYPES
 BEFORE INSERT
 ON CONFIG_KEY_TYPES
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN

   if :new.CONFIG_KEY_TYPE_ID is null then
      SELECT CONFIG_KEY_TYPE_ID_SEQ.NEXTVAL INTO :new.CONFIG_KEY_TYPE_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger
create or replace trigger TR_UPD_CONFIG_KEY_TYPES
BEFORE UPDATE
ON CONFIG_KEY_TYPES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_KEY_TYPE_ID := :OLD.CONFIG_KEY_TYPE_ID;
   :new.NAME := :OLD.NAME;
   :new.CREATE_TIMESTAMP      := :OLD.CREATE_TIMESTAMP;
   :new.CREATED_BY_USER       := :OLD.CREATED_BY_USER;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR


--CONFIG_KEY_VERSION_ALIAS_MAPS
PROMPT Creating Trigger 'TR_INS_CONFIG_KEYVER_ALS_MAPS'
create or replace trigger TR_INS_CONFIG_KEYVER_ALS_MAPS
BEFORE INSERT
ON CONFIG_KEY_VERSION_ALIAS_MAPS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

   if :new.CONFIG_KEY_VERSION_ALIAS_ID is null then
      SELECT  CONFIG_KEY_VER_ALIAS_ID_SEQ.NEXTVAL INTO :new.CONFIG_KEY_VERSION_ALIAS_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;


   if :new.IS_MOVED_TO_HISTORY is null then
     :NEW.IS_MOVED_TO_HISTORY  := 'F';
   end if;

   BEGIN
             --   CONFIG_VERSION_ALIAS_ID =:new.CONFIG_VERSION_ALIAS_ID
       update CONFIG_KEY_VERSION_ALIAS_MAPS set IS_MOVED_TO_HISTORY = 'T' where

            CONFIG_KEY_ALIAS_ID =:new.CONFIG_KEY_ALIAS_ID
           and KIND_OF_CONDITION_ID =:new.KIND_OF_CONDITION_ID;

   EXCEPTION
    when NO_DATA_FOUND THEN
        --Consider logging the error and then re-raise
        RAISE;
   END;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger 'TR_UPD_CONFIG_KEYVER_ALS_MAPS'
create or replace trigger TR_UPD_CONFIG_KEYVER_ALS_MAPS
BEFORE UPDATE
ON CONFIG_KEY_VERSION_ALIAS_MAPS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_KEY_VERSION_ALIAS_ID := :OLD.CONFIG_KEY_VERSION_ALIAS_ID;
   :new.CONFIG_KEY_ALIAS_ID := :OLD.CONFIG_KEY_ALIAS_ID;
   :new.CONFIG_VERSION_ALIAS_ID    := :OLD.CONFIG_VERSION_ALIAS_ID;
   :new.KIND_OF_CONDITION_ID    := :OLD.KIND_OF_CONDITION_ID;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR


--CONFIG_KEY_VERSION_MAPS

PROMPT Creating Trigger 'TR_INS_CONFIG_KEY_VERSION_MAPS'
create or replace trigger TR_INS_CONFIG_KEY_VERSION_MAPS
BEFORE INSERT
ON CONFIG_KEY_VERSION_MAPS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE

T_CONFIG_KEY_TYPE_ID NUMBER(38,0);
T_KIND_OF_CONDITION_ID NUMBER(38,0);
T_PART_ID NUMBER(38,0);

BEGIN

   if :new.CONFIG_KEY_VERSION_MAP_ID is null then
      SELECT CONFIG_KEY_VERSION_MAP_ID_SEQ.NEXTVAL INTO :new.CONFIG_KEY_VERSION_MAP_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   if :new.IS_MOVED_TO_HISTORY is null then
        :NEW.IS_MOVED_TO_HISTORY  := 'F';
   end if;

   BEGIN
     --   update CONFIG_KEY_VERSION_MAPS set IS_MOVED_TO_HISTORY = 'T' where
     --      CONDITION_DATA_SET_ID =:new.CONDITION_DATA_SET_ID
     --      and CONFIG_KEY_ID =:new.CONFIG_KEY_ID ;

   update CONFIG_KEY_VERSION_MAPS set IS_MOVED_TO_HISTORY = 'T' where
   CONFIG_KEY_ID =:new.CONFIG_KEY_ID and CONDITION_DATA_SET_ID
   in (
        select distinct DAT.CONDITION_DATA_SET_ID from
        (
        select DS1.CONDITION_DATA_SET_ID, DS1.KIND_OF_CONDITION_ID
        from CMS_&det._CORE_COND.COND_DATA_SETS DS1
        inner join  CONFIG_KEY_VERSION_MAPS MP
        on MP.CONDITION_DATA_SET_ID=DS1.CONDITION_DATA_SET_ID
        where MP.CONFIG_KEY_ID=:new.CONFIG_KEY_ID ) DAT
        inner join (
        select KIND_OF_CONDITION_ID from CMS_&det._CORE_COND.COND_DATA_SETS DS4
        where DS4.CONDITION_DATA_SET_ID=:new.CONDITION_DATA_SET_ID ) KOC
        on KOC.KIND_OF_CONDITION_ID = DAT.KIND_OF_CONDITION_ID
   );

     EXCEPTION
    when NO_DATA_FOUND THEN
        --Consider logging the error and then re-raise
        RAISE;
   END;

   --BEGIN
   --select KK.CONFIG_KEY_TYPE_ID into T_CONFIG_KEY_TYPE_ID  from CONFIG_KEY KK where KK.CONFIG_KEY_ID = :new.CONFIG_KEY_ID;
   --select DS.PART_ID, DS.KIND_OF_CONDITION_ID into T_PART_ID, T_KIND_OF_CONDITION_ID  from CMS_PXL_CORE_COND.COND_DATA_SETS DS where DS.CONDITION_DATA_SET_ID = :new.CONDITION_DATA_SET_ID;
   --EXCEPTION
   --  WHEN NO_DATA_FOUND THEN
   --    -- Consider logging the error and then re-raise
   --    RAISE;
   --END;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger 'TR_UPD_CONFIG_KEY_VERSION_MAPS'
create or replace trigger TR_UPD_CONFIG_KEY_VERSION_MAPS
 BEFORE UPDATE
 ON CONFIG_KEY_VERSION_MAPS
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_KEY_VERSION_MAP_ID := :OLD.CONFIG_KEY_VERSION_MAP_ID;

   :new.CONDITION_DATA_SET_ID := :OLD.CONDITION_DATA_SET_ID;
   :new.CONFIG_KEY_ID := :OLD.CONFIG_KEY_ID;
   :new.CONFIG_TYPE_KOC_MAP_ID := :OLD.CONFIG_TYPE_KOC_MAP_ID;
   :new.SUBVERSION_COND_DATA_SET_ID := :OLD.SUBVERSION_COND_DATA_SET_ID;



   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

--CONFIG_TYPE_KOC_PART_MAPS
PROMPT Creating Trigger 'TR_INS_CONFIG_TPKOCPRT_MAPS'
create or replace trigger TR_INS_CONFIG_TPKOCPRT_MAPS
 BEFORE INSERT
 ON CONFIG_TYPE_KOC_PART_MAPS
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN

   if :new.CONFIG_TYPE_KOC_MAP_ID is null then
      SELECT CONFIG_TYPE_KOC_MAP_ID_SEQ.NEXTVAL INTO :new.CONFIG_TYPE_KOC_MAP_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger 'TR_UPD_CONFIG_TPKOCPRT_MAPS'
create or replace trigger TR_UPD_CONFIG_TPKOCPRT_MAPS
 BEFORE UPDATE
 ON CONFIG_TYPE_KOC_PART_MAPS
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_TYPE_KOC_MAP_ID:= :OLD.CONFIG_TYPE_KOC_MAP_ID;

   :new.CONFIG_KEY_TYPE_ID    := :OLD.CONFIG_KEY_TYPE_ID;
   :new.KIND_OF_CONDITION_ID  := :OLD.KIND_OF_CONDITION_ID;
   :new.PART_ID  := :OLD.PART_ID;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERRORP

--CONFIG_VERSION_ALIAS_MAP
PROMPT Creating Trigger 'TR_INS_CONFIG_VER_ALIAS_MAPS'
create or replace trigger TR_INS_CONFIG_VER_ALIAS_MAPS
BEFORE INSERT
ON CONFIG_VERSION_ALIAS_MAP
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

   if :new.CONFIG_VERSION_ALIAS_MAP_ID is null then
      SELECT  CONFIG_VER_ALIAS_MAP_ID_SEQ.NEXTVAL INTO :new.CONFIG_VERSION_ALIAS_MAP_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;


   if :new.IS_MOVED_TO_HISTORY is null then
     :NEW.IS_MOVED_TO_HISTORY  := 'F';
   end if;

   BEGIN
   update CONFIG_VERSION_ALIAS_MAP set IS_MOVED_TO_HISTORY = 'T' where  CONFIG_VERSION_ALIAS_ID =:new.CONFIG_VERSION_ALIAS_ID and CONDITION_DATA_SET_ID
   in (
        select distinct DAT.CONDITION_DATA_SET_ID from
        (
        select DS1.CONDITION_DATA_SET_ID, DS1.KIND_OF_CONDITION_ID
        from CMS_&det._CORE_COND.COND_DATA_SETS DS1
        inner join CONFIG_VERSION_ALIAS_MAP MP
        on MP.CONDITION_DATA_SET_ID=DS1.CONDITION_DATA_SET_ID
        where MP.CONFIG_VERSION_ALIAS_ID=:new.CONFIG_VERSION_ALIAS_ID ) DAT
        inner join (
        select KIND_OF_CONDITION_ID from CMS_&det._CORE_COND.COND_DATA_SETS DS4
        where DS4.CONDITION_DATA_SET_ID=:new.CONDITION_DATA_SET_ID ) KOC
        on KOC.KIND_OF_CONDITION_ID = DAT.KIND_OF_CONDITION_ID
   );
   EXCEPTION
    when NO_DATA_FOUND THEN
        --Consider logging the error and then re-raise
        RAISE;
   END;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR

PROMPT Creating Trigger 'TR_UPD_CONFIG_VER_ALIAS_MAPS'
create or replace trigger TR_UPD_CONFIG_VER_ALIAS_MAPS
BEFORE UPDATE
ON CONFIG_VERSION_ALIAS_MAP
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_VERSION_ALIAS_MAP_ID := :OLD.CONFIG_VERSION_ALIAS_MAP_ID;
   :new.CONFIG_VERSION_ALIAS_ID := :OLD.CONFIG_VERSION_ALIAS_ID;
   :new.CONDITION_DATA_SET_ID    := :OLD.CONDITION_DATA_SET_ID;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR



-- CONFIG_VERSION_ALIASES
PROMPT Creating Trigger 'TR_INS_CONFIG_VERSION_ALIASES'
create or replace trigger TR_INS_CONFIG_VERSION_ALIASES
BEFORE INSERT
ON CONFIG_VERSION_ALIASES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

   if :new.CONFIG_VERSION_ALIAS_ID is null then
      SELECT  CONFIG_VER_ALIAS_ID_SEQ.NEXTVAL INTO :new.CONFIG_VERSION_ALIAS_ID FROM dual;
   end if;

      :NEW.RECORD_INSERTION_TIME := SYSDATE;

   if :new.RECORD_INSERTION_USER is null then
     :NEW.RECORD_INSERTION_USER  := USER;
   end if;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR


PROMPT Creating Trigger 'TR_UPD_CONFIG_VERSION_ALIASES'
create or replace trigger TR_UPD_CONFIG_VERSION_ALIASES
BEFORE UPDATE
ON CONFIG_VERSION_ALIASES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   -- protect the original record data
   :new.RECORD_INSERTION_TIME := :OLD.RECORD_INSERTION_TIME;
   :new.RECORD_INSERTION_USER := :OLD.RECORD_INSERTION_USER;
   :new.CONFIG_VERSION_ALIAS_ID   := :OLD.CONFIG_VERSION_ALIAS_ID;
   :new.NAME   := :OLD.NAME;
   :new.CREATE_TIMESTAMP      := :OLD.CREATE_TIMESTAMP;
   :new.CREATED_BY_USER       := :OLD.CREATED_BY_USER;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/
SHOW ERROR